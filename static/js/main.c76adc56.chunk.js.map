{"version":3,"sources":["components/menu.tsx","components/clock.tsx","components/gametypeone.tsx","components/gametypetwo.tsx","components/notfound.tsx","components/App.tsx","index.tsx"],"names":["MenuComponent","Container","fluid","className","Card","Body","to","Button","variant","React","Component","Clock","props","radius","drawingContext","draw24hour","drawRoman","timerId","state","time","size","timeFormat","toLowerCase","trim","hourFormat","this","getDrawingContext","setInterval","tick","clearInterval","refs","clockCanvas","getContext","translate","isActive","setState","Date","getTime","ctx","drawFace","drawNumbers","drawTicks","drawTime","beginPath","arc","Math","PI","fillStyle","fill","grad","createRadialGradient","addColorStop","strokeStyle","lineWidth","stroke","ang","num","romans","fontBig","fontSmall","textBaseline","textAlign","rotate","font","fillText","toString","numTicks","tickAng","tickX","tickY","sin","cos","moveTo","lineTo","now","hour","getHours","minute","getMinutes","second","getSeconds","drawHand","showSeconds","position","length","width","color","lineCap","style","String","height","ref","defaultProps","GameTypeOneComponent","hours","minutes","tasks","count","success","error","help","newTask","localStorage","getItem","setItem","floor","random","rightIndex","i","date","setHours","task","right","push","answer","setTimeout","Row","Col","xs","map","index","key","onClick","Alert","show","OverlayTrigger","placement","overlay","Tooltip","id","history","goBack","Modal","onHide","centered","Header","closeButton","GameTypeTwoComponent","hours_ru","hours_ru_rod","minutes_ru","title","replace","toUpperCase","round","generateTitleFromTime","hours2","minutes2","NotFound","Router","ReactRouterDOM","Route","Switch","App","basename","process","exact","path","component","NotFoundComponent","Particles","require","window","onload","init","selector","connectParticles","maxParticles","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c76adc56.chunk.js","sourcesContent":["import React from 'react';\nimport { Container, Button, Card } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nexport default class MenuComponent extends React.Component\n{\n    public render()\n    {\n        return (\n            <Container fluid className=\"d-flex justify-content-center align-items-center h-100\">\n                <Card>\n                    <Card.Body>\n                        <p className=\"display-4\">Главное меню</p>\n                        <LinkContainer to=\"/typeone\"><Button variant=\"primary\" className=\"w-100 my-1\">Определи время</Button></LinkContainer>\n                        <LinkContainer to=\"/typetwo\"><Button variant=\"primary\" className=\"w-100 my-1\">Правильно назови время</Button></LinkContainer>\n                        <p className=\"mt-2 text-center\">Copyright © Sergei Shekshuev, 2020</p>\n                    </Card.Body>\n                </Card>\n            </Container>\n        )\n    }   \n}\n","import React from \"react\";\n\ninterface IState \n{\n    time: Date\n}\n\ninterface IProps\n{\n    size: number,\n    timeFormat: string,\n    hourFormat: string,\n    time: Date,\n    isActive: boolean,\n    showSeconds: boolean\n}\n\nexport default class Clock extends React.Component<IProps, IState>\n{\n\n    private radius : number;\n    private drawingContext : any;\n    private draw24hour : boolean;\n    private drawRoman : boolean;\n    private timerId : any;\n\n    public readonly state: Readonly<IState> = \n    {\n        time: this.props.time\n    }\n\n    public static defaultProps = \n    {\n        timeFormat: \"24hour\",\n        hourFormat: \"standard\",\n        isActive: true,\n        showSeconds: true\n    };\n    \n    constructor(props: IProps) \n    {\n        super(props);\n        this.radius = this.props.size / 2;\n        this.drawingContext = null;\n        this.draw24hour = this.props.timeFormat.toLowerCase().trim() === \"24hour\";\n        this.drawRoman = !this.draw24hour && this.props.hourFormat.toLowerCase().trim() === \"roman\";\n    }\n \n    public componentDidMount() \n    {\n        this.getDrawingContext();\n        this.timerId = setInterval(() => this.tick(), 1000);\n    }\n \n    public componentWillUnmount() \n    {\n        clearInterval(this.timerId);\n    }\n \n    private getDrawingContext() {\n        this.drawingContext = (this.refs.clockCanvas as HTMLCanvasElement).getContext('2d');\n        this.drawingContext.translate(this.radius, this.radius);\n        this.radius *= 0.9;\n    }\n \n    private tick() \n    {\n        if (this.props.isActive)\n            this.setState({ time: new Date(this.state.time.getTime() + 1000) });\n        else this.setState({ time: this.props.time });\n        const radius = this.radius;\n        let ctx = this.drawingContext;\n        this.drawFace(ctx, radius);\n        this.drawNumbers(ctx, radius);\n        this.drawTicks(ctx, radius);\n        this.drawTime(ctx, radius);\n    }\n \n    private drawFace(ctx: any, radius: number) \n    {\n        ctx.beginPath();\n        ctx.arc(0,0, radius, 0, 2 * Math.PI);\n        ctx.fillStyle = \"white\";\n        ctx.fill();\n    \n        const grad = ctx.createRadialGradient(0, 0, radius * 0.95, 0, 0, radius * 1.05);\n        grad.addColorStop(0, \"#333\");\n        grad.addColorStop(0.5, \"white\");\n        grad.addColorStop(1, \"#333\");\n        ctx.strokeStyle = grad;\n        ctx.lineWidth = radius * 0.1;\n        ctx.stroke();\n    \n        ctx.beginPath();\n        ctx.arc(0, 0, radius * 0.05, 0, 2 * Math.PI);\n        ctx.fillStyle = \"#333\";\n        ctx.fill();\n    }\n \n    private drawNumbers(ctx: any, radius: number) \n    {\n        const romans = [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\"];\n        const fontBig = radius * 0.15 + \"px Arial\";\n        const fontSmall = radius * 0.075 + \"px Arial\";\n        let ang, num;\n \n        ctx.textBaseline = \"middle\";\n        ctx.textAlign = \"center\";\n        for (num = 1; num < 13; num++) \n        {\n            ang = num * Math.PI / 6;\n            ctx.rotate(ang);\n            ctx.translate(0, -radius * 0.78);\n            ctx.rotate(-ang);\n            ctx.font = fontBig;\n            ctx.fillStyle = \"black\";\n            ctx.fillText(this.drawRoman ? romans[num-1] : num.toString(), 0, 0);\n            ctx.rotate(ang);\n            ctx.translate(0, radius * 0.78);\n            ctx.rotate(-ang);\n    \n            // Draw inner numerals for 24 hour time format\n            if (this.draw24hour) \n            {\n                ctx.rotate(ang);\n                ctx.translate(0, -radius * 0.60);\n                ctx.rotate(-ang);\n                ctx.font = fontSmall;\n                ctx.fillStyle = \"red\";\n                ctx.fillText((num + 12).toString(), 0, 0);\n                ctx.rotate(ang);\n                ctx.translate(0, radius * 0.60);\n                ctx.rotate(-ang);\n            }\n        }\n    }\n \n    private drawTicks(ctx: any, radius: number) \n    {\n        let numTicks, tickAng, tickX, tickY;\n        for (numTicks = 0; numTicks < 60; numTicks++) \n        {\n \n            tickAng = (numTicks * Math.PI / 30);\n            tickX = radius * Math.sin(tickAng);\n            tickY = -radius * Math.cos(tickAng);\n    \n            ctx.beginPath();\n            ctx.lineWidth = radius * 0.010;\n            ctx.moveTo(tickX, tickY);\n            if (numTicks % 5 === 0) {\n                ctx.lineTo(tickX * 0.88, tickY * 0.88);\n            } \n            else \n            {\n                ctx.lineTo(tickX * 0.92, tickY * 0.92);\n            }\n            ctx.stroke();\n       }\n    }\n \n    private drawTime(ctx: any, radius: number) \n    {\n        const now = this.state.time;\n        let hour = now.getHours();\n        let minute = now.getMinutes();\n        let second = now.getSeconds();\n        hour %= 12;\n        hour = (hour * Math.PI / 6) + (minute * Math.PI / (6 * 60)) + (second * Math.PI / (360 * 60));\n        this.drawHand(ctx, hour, radius * 0.5, radius * 0.05);\n        minute = (minute * Math.PI / 30) + (second * Math.PI / (30 * 60));\n        this.drawHand(ctx, minute, radius * 0.8, radius * 0.05);\n        if (this.props.showSeconds)\n        {\n            second = (second * Math.PI / 30);\n            this.drawHand(ctx, second, radius * 0.9, radius * 0.02, \"red\");\n        }\n    }\n \n    private drawHand(ctx: any, position: number, length: number, width: number, color: string = \"black\") \n    {\n        color = color || \"black\";\n        ctx.beginPath();\n        ctx.lineWidth = width;\n        ctx.lineCap = \"round\";\n        ctx.fillStyle = color;\n        ctx.strokeStyle = color;\n        ctx.moveTo(0, 0);\n        ctx.rotate(position);\n        ctx.lineTo(0, -length);\n        ctx.stroke();\n        ctx.rotate(-position);\n    }\n \n    public render() \n    {\n        return (\n            <div className=\"Clock\" style={{ width: String(this.props.size) + 'px' }}>\n                <canvas width={this.props.size} height={this.props.size} ref=\"clockCanvas\"/>\n            </div>\n        );\n    }\n }","import React from 'react';\nimport { Alert, Container, Row, Col, Button, Card, OverlayTrigger, Tooltip, Modal } from \"react-bootstrap\";\nimport Clock from \"./clock\";\n\ninterface Task \n{\n    right: boolean,\n    date: Date\n}\n\ninterface IState \n{\n    hours: number,\n    minutes: number,\n    tasks: Task[],\n    count: number,\n    success: boolean,\n    error: boolean,\n    help: boolean\n}\n\nexport default class GameTypeOneComponent extends React.Component<any, IState>\n{\n\n    public readonly state: Readonly<IState> = \n    {\n        hours: 0,\n        minutes: 0,\n        tasks: [], \n        count: 3,\n        success: false,\n        error: false,\n        help: false\n    }\n\n    public componentDidMount()\n    {\n        this.newTask();\n        if (localStorage.getItem(\"typeone_help\") != \"done\")\n        {\n            this.setState({ help: true });\n            localStorage.setItem(\"typeone_help\", \"done\");\n        }\n    }\n\n    private newTask()\n    {\n        let hours = Math.floor(Math.random() * 24);\n        let minutes = Math.floor(Math.random() * 59);\n        let tasks : Task[] = [];\n        let rightIndex = Math.floor(Math.random() * 3);\n        for (let i = 0; i < this.state.count; i++)\n        {\n            if (i == rightIndex) \n            {\n                let date = new Date();\n                date.setHours(hours, minutes, 0);\n                let task : Task = \n                {\n                    right: true,\n                    date: date\n                }\n                tasks.push(task);\n            }\n            else \n            {\n                let date = new Date();\n                date.setHours(Math.floor(Math.random() * 24), Math.floor(Math.random() * 59), 0);\n                let task : Task = \n                {\n                    right: false,\n                    date: date\n                }\n                tasks.push(task);\n            }\n            this.setState({\n                hours: hours,\n                minutes: minutes,\n                tasks: tasks\n            });\n        }\n    }\n\n    private answer(answer: boolean)\n    {\n        if (answer)\n        {\n            this.setState({ success: true, error: false }, () => \n            {\n                setTimeout(() => this.setState({ success: false }, () => this.newTask()), 1000);\n            });\n        } \n        else \n        {\n            this.setState({ error: true }, () => \n            {\n                setTimeout(() => this.setState({ error: false }), 1000);\n            });\n        }\n    }\n\n    public render()\n    {\n        return (\n            <Container className=\"d-flex justify-content-center align-items-center h-100\">\n                <Row>\n                    <Col xs={12}>\n                        <Card>\n                            <Card.Body>\n                                <Row>\n                                { this.state.tasks.map((task, index) => \n                                (\n                                    <Col xs={4} className=\"d-flex flex-column justify-content-center align-items-center\" key={index}>\n                                        <Clock size={ 200 } time={ task.date } isActive={ false } showSeconds={ false } />\n                                        <Button variant=\"outline-primary\" onClick={ () => this.answer(task.right)}>Выбрать</Button>\n                                    </Col>\n                                )) }\n                                </Row>\n                                <Row>\n                                    <Col xs={12} className=\"my-3\">\n                                        <Alert show={ this.state.success } variant=\"success\" className=\"text-center\">Верно!</Alert>\n                                        <Alert show={ this.state.error } variant=\"danger\" className=\"text-center\">Подумай еще</Alert>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={12} className=\"d-flex justify-content-center align-items-center\">\n                                        <h1 className=\"display-1\">\n                                            { \n                                                (this.state.hours > 9 ? this.state.hours.toString() : \"0\" + this.state.hours.toString())\n                                                + \":\" + \n                                                (this.state.minutes > 9 ? this.state.minutes.toString() : \"0\" + this.state.minutes.toString())\n                                            }\n                                        </h1>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={12} className=\"d-flex flex-row justify-content-center align-items-center mb-2\">\n                                        <Button variant=\"outline-secondary\" className=\"mx-1\" onClick={ () => this.newTask() }>Сброс</Button>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={12} className=\"d-flex flex-row justify-content-between\">\n                                        <OverlayTrigger placement=\"top\" overlay={\n                                            <Tooltip id=\"menu_tooltip\">Вернуться в меню</Tooltip>\n                                        }>\n                                            <Button variant=\"outline-secondary\" className=\"mx-1\" onClick={ () => this.props.history.goBack() }><i className=\"fa fa-arrow-left fa-2x\"></i></Button>\n                                        </OverlayTrigger>\n                                        <OverlayTrigger placement=\"top\" overlay={\n                                            <Tooltip id=\"help_tooltip\">Помощь</Tooltip>\n                                        }>\n                                            <Button variant=\"outline-secondary\" className=\"mx-1\" onClick={ () => this.setState({ help: true })}><i className=\"fa fa-question fa-2x\"></i></Button>\n                                        </OverlayTrigger>\n                                        \n                                    </Col>\n                                </Row>\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                </Row>\n                <Modal show={ this.state.help } size=\"lg\" onHide={ () => this.setState({ help: false}) } centered>\n                    <Modal.Header closeButton>\n                        <span>Помощь</span>\n                    </Modal.Header>\n                    <Modal.Body className=\"d-flex flex-column justify-content-center align-items-center\">\n                        <div>\n                            <p className=\"text-center\">Привет!</p>\n                            <p className=\"text-center\">Здесь ты можешь потренироваться определять время на часах.</p>\n                            <p className=\"text-center\">В центре рабоченго окна указано время в цифровом формате (часы:минуты). Сверху представлены три циферблата, но только на одном из них время такое же, как и указано в цифровом виде. Попробуй определить этот циферблат и нажми на кнопку \"Выбрать\" под ним.</p>\n                            <p className=\"text-center\">Если затрудняешься с ответом, нажми на кнопку \"Сброс\", и тогда появится новое время.</p>\n                            <p className=\"text-center\">Удачи!</p>\n                        </div>\n                        <Button variant=\"outline-primary\" onClick={ () => this.setState({ help: false })}>Приступить</Button>\n                    </Modal.Body>\n                </Modal>\n            </Container>\n        )\n    }   \n}\n","import React from 'react';\nimport { Container, Button, Card, Row, Col, Alert, Tooltip, OverlayTrigger, Modal } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nimport Clock from \"./clock\";\n\ninterface IState \n{\n    tasks: Task[],\n    time: Date,\n    success: boolean,\n    error: boolean,\n    help: boolean\n}\n\ninterface Task \n{\n    right: boolean,\n    title: string,\n    minutes: number,\n    hours: number\n}\n\nexport default class GameTypeTwoComponent extends React.Component<any, IState>\n{\n\n    private readonly hours_ru : string [] = \n    [\n        \"час\",\n        \"два\",\n        \"три\",\n        \"четыре\",\n        \"пять\",\n        \"шесть\",\n        \"семь\",\n        \"восемь\",\n        \"девять\",\n        \"десять\",\n        \"одиннадцать\",\n        \"двенадцать\"\n    ]\n\n    private readonly hours_ru_rod : string [] = \n    [\n        \"первого\",\n        \"второго\",\n        \"третьего\",\n        \"четвертого\",\n        \"пятого\",\n        \"шестого\",\n        \"седьмого\",\n        \"восьмого\",\n        \"девятого\",\n        \"десятого\",\n        \"одиннадцатого\",\n        \"двенадцатого\"\n    ]\n\n    private readonly minutes_ru : string [] = \n    [\n        \"Пять минут \",\n        \"Десять минут \",\n        \"Пятнадцать минут \",\n        \"Двадцать минут \",\n        \"Двадцать пять минут \",\n        \"Половина \",\n        \"Без двадцати пяти \",\n        \"Без двадцати \",\n        \"Без пятнадцати \",\n        \"Без десяти \",\n        \"Без пяти \"\n    ] \n\n    public readonly state: Readonly<IState> = \n    {\n        tasks: [],\n        time: new Date(),\n        success: false,\n        error: false,\n        help: false\n    }\n\n    private generateTitleFromTime(hours: number, minutes: number) : string\n    {\n        if (hours >= 12) hours -= 12;\n        let title = \"\";\n        if (minutes == 0)\n        {\n            if (hours == 0) \n                hours = 11;\n            else hours -= 1;\n            title += this.hours_ru[hours] + \" ровно\";\n            title = title.replace(title[0], title[0].toUpperCase());\n        }\n        else if (minutes == 30)\n        {\n            title += this.minutes_ru[5] + this.hours_ru_rod[hours];\n        }\n        else if (minutes < 30)\n        {\n            let index = minutes / 5 - 1;\n            title += this.minutes_ru[index] + this.hours_ru_rod[hours];\n        }\n        else \n        {\n            let index = minutes / 5 - 1;\n            title += this.minutes_ru[index] + this.hours_ru[hours];\n        }\n        return title;\n    }\n\n    private newTask()\n    {\n        let count = 4;\n        let rightIndex = Math.floor(Math.random() * 4);\n        let hours = Math.floor(Math.random() * 24);\n        let minutes = Math.round(Math.floor(Math.random() * 55) / 5) * 5;\n        let tasks : Task[] = [];\n        for (let i = 0; i < count; i++)\n        {\n            if (rightIndex == i)\n            {\n                let task : Task = \n                {\n                    right: true,\n                    title: this.generateTitleFromTime(hours, minutes),\n                    minutes: minutes,\n                    hours: hours\n                }\n                tasks.push(task);\n            }\n            else \n            {\n                let hours2 = Math.floor(Math.random() * 24);\n                let minutes2 = Math.round(Math.floor(Math.random() * 55) / 5) * 5;\n                let task : Task = \n                {\n                    right: false,\n                    title: this.generateTitleFromTime(hours2, minutes2),\n                    hours: hours2,\n                    minutes: minutes2\n                }\n                tasks.push(task);\n            }\n        }\n        let date = new Date();\n        date.setHours(hours, minutes, 0);\n        this.setState({\n            tasks: tasks,\n            time: date\n        });\n    }\n\n    public componentDidMount()\n    {\n        this.newTask()\n        if (localStorage.getItem(\"typetwo_help\") != \"done\")\n        {\n            this.setState({ help: true });\n            localStorage.setItem(\"typetwo_help\", \"done\");\n        }\n    }\n\n    private answer(answer: boolean)\n    {\n        if (answer)\n        {\n            this.setState({ success: true, error: false }, () => \n            {\n                setTimeout(() => this.setState({ success: false }, () => this.newTask()), 1000);\n            });\n        } \n        else \n        {\n            this.setState({ error: true }, () => \n            {\n                setTimeout(() => this.setState({ error: false }), 1000);\n            });\n        }\n    }\n\n    public render()\n    {\n        return (\n            <Container className=\"d-flex justify-content-center align-items-center h-100\">\n                <Row>\n                    <Col xs={12}>\n                        <Card>\n                            <Card.Body>\n                                <Row>\n                                    <Col xs={12} className=\"d-flex flex-column justify-content-center align-items-center\">\n                                        <Clock size={300} isActive={false} time={ this.state.time } showSeconds={false}/>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={12} className=\"my-3\">\n                                        <Alert show={ this.state.success } variant=\"success\" className=\"text-center\">Верно!</Alert>\n                                        <Alert show={ this.state.error } variant=\"danger\" className=\"text-center\">Подумай еще</Alert>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    { this.state.tasks.map((task, index) => \n                                    (\n                                        <Col xs={6} key={index} className=\"my-1 d-flex flex-column justify-content-center align-items-center\">\n                                            <Button variant=\"outline-primary\" className=\"w-100\" onClick={ () => this.answer(task.right) } >{ task.title }</Button>\n                                        </Col>\n                                    )) }\n                                </Row>\n                                <Row>\n                                    <Col xs={12} className=\"d-flex flex-column justify-content-center align-items-center\">\n                                        <Button variant=\"outline-primary\" onClick={() => this.newTask() }>Сброс</Button>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={12} className=\"d-flex flex-row justify-content-between\">\n                                        <OverlayTrigger placement=\"top\" overlay={\n                                            <Tooltip id=\"menu_tooltip\">Вернуться в меню</Tooltip>\n                                        }>\n                                            <Button variant=\"outline-secondary\" className=\"mx-1\" onClick={ () => this.props.history.goBack() }><i className=\"fa fa-arrow-left fa-2x\"></i></Button>\n                                        </OverlayTrigger>\n                                        <OverlayTrigger placement=\"top\" overlay={\n                                            <Tooltip id=\"help_tooltip\">Помощь</Tooltip>\n                                        }>\n                                            <Button variant=\"outline-secondary\" className=\"mx-1\" onClick={ () => this.setState({ help: true })}><i className=\"fa fa-question fa-2x\"></i></Button>\n                                        </OverlayTrigger>\n                                        \n                                    </Col>\n                                </Row>\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                </Row>\n                <Modal show={ this.state.help } size=\"lg\" onHide={ () => this.setState({ help: false}) } centered>\n                    <Modal.Header closeButton>\n                        <span>Помощь</span>\n                    </Modal.Header>\n                    <Modal.Body className=\"d-flex flex-column justify-content-center align-items-center\">\n                        <div>\n                            <p className=\"text-center\">Привет!</p>\n                            <p className=\"text-center\">Здесь ты можешь потренироваться определять время на часах.</p>\n                            <p className=\"text-center\">В центре рабочего окна нарисован циферблат со временем. Ниже представлены четыре кнопки с ответами, где ответ - это время, указанное как, например, \"без десяти пять\" или \"пятнадцать минут восьмого\". Но только один ответ правильный. Попробуй найти этот ответ и нажми на него.</p>\n                            <p className=\"text-center\">Если затрудняешься с ответом, нажми на кнопку \"Сброс\", и тогда появится новое время.</p>\n                            <p className=\"text-center\">Удачи!</p>\n                        </div>\n                        <Button variant=\"outline-primary\" onClick={ () => this.setState({ help: false })}>Приступить</Button>\n                    </Modal.Body>\n                </Modal>\n            </Container>\n        )\n    }   \n}\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nexport default class NotFound extends React.Component\n{\n    render()\n    {\n        return (\n            <div className=\"d-flex justify-content-center align-items-center h-100\">\n                <div className=\"align-self-center\"><h2>Ресурс не найден</h2></div>\n                <LinkContainer to=\"/\"><Button variant=\"primary\" className=\"w-100 my-1\">На главную</Button></LinkContainer>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport * as ReactRouterDOM from \"react-router-dom\";\nimport { Container } from \"react-bootstrap\";\n\nimport MenuComponent from \"./menu\";\nimport GameTypeOneComponent from \"./gametypeone\";\nimport GameTypeTwoComponent from \"./gametypetwo\";\nimport NotFoundComponent from \"./notfound\";\n\nconst Router = ReactRouterDOM.BrowserRouter;\nconst Route = ReactRouterDOM.Route;\nconst Switch = ReactRouterDOM.Switch;\n\nexport default class App extends React.Component\n{\n    public render()\n    {\n        return (\n            <Container fluid className=\"p-0 m-0 h-100\">\n                <Router basename={process.env.PUBLIC_URL}>\n                    <Switch>\n                        <Route exact path=\"/\" component={ MenuComponent } />\n                        <Route path=\"/typeone\" component={ GameTypeOneComponent } />\n                        <Route path=\"/typetwo\" component={ GameTypeTwoComponent } />\n                        <Route component={ NotFoundComponent } />\n                    </Switch>\n                </Router>\n            </Container>\n        )\n    }   \n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nimport \"bootstrap/dist/js/bootstrap.min.js\";\nimport \"bootswatch/dist/sketchy/bootstrap.min.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nconst Particles = require(\"particlesjs\");\n\nwindow.onload = function() {\n    Particles.init({\n      selector: '.background',\n      connectParticles: true,\n      maxParticles: 70\n    });\n  };\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}